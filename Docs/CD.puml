@startuml
'https://plantuml.com/class-diagram
'Sprint4
class CheckForCargoManifestMapUI {
  +run()
}

class CheckForCargoManifestMapController {
  +callFunction()
}

class CheckForCargoManifestMapFunction {
  +callFunction()
}

class LocalDate {
  +now()
}

class sql.Date {
  +valueOf()
}

CheckForCargoManifestMapUI ..> CheckForCargoManifestMapController
CheckForCargoManifestMapController ..> CheckForCargoManifestMapFunction
CheckForCargoManifestMapUI -> LocalDate
CheckForCargoManifestMapUI -> sql.Date


class ShipWaterPhysicsUI {
  + run()
}

class ShipWaterPhysicsController  {
  - rShip
  - cargoManifest
  - numContainers
  - waterDensity
  - containerWeight
  - gravityAcceleration
  - totalMass
  - pressureExerted
  - heightAboveWater
  - heightDiff
  + getShipList()
  + getShipCargoManifests()
  + calculateData()
  + calculateTotalMass()
  + calculatePressureExerted()
  + calculateHeightAboveWater()
  + SummaryString()
}

class Ship  {
  + getDraft()
  + getWidth()
  + getLength()
}

class DataBaseUtils  {
  + getShipCaptainShips()
  + getShipCargoManifests()
}

ShipWaterPhysicsUI ..> ShipWaterPhysicsController
ShipWaterPhysicsController -> Ship
ShipWaterPhysicsController ..> DataBaseUtils



class PortCentralityUI {
  + run()
}

class PortCentralityController  {
  + getCriticalPorts()
}


class PortCentrality  {
  +getCentralityOfNPorts()
  +sortMap()
}


PortCentralityUI ..> PortCentralityController
PortCentralityController -> PortCentrality
PortCentrality -> Algorithms
PortCentrality -> Vertex

class ShortestPathBetweenTwoLocalsUI {
  + run()
}

class ShortestPathBetweenTwoLocalsController  {
  -Graph graph
  -VertexMapper vertexMapper
  -FreightNetwork freightNetwork
  -LinkedList vertexList
  -int index
  -boolean buildGraph
  -List vertexDtoList
  +getAllVerticesByIndex()
  +constructList()
  +resetListIndex()
  +constructMenuOptions()
  +graphMaxVertices()
  +getPath()
  +convertDtoIntoVertex()
  +convertDtoListIntoVertexList()
  +verifyVertex()
}


class ShortPaths  {
  +seaPath()
  +landPath()
  +calculateBestPath()
  +permutation()
}

class VertexMapper{
+toDTO()
}

class VertexDTO{
-String identification
-String name
+getName()
+toString()
}

interface Graph{
+vertices()
+removeEdge()
+adjVertices()
+edge()
}

ShortestPathBetweenTwoLocalsUI ..> ShortestPathBetweenTwoLocalsController
ShortestPathBetweenTwoLocalsController ..> VertexDTO
ShortestPathBetweenTwoLocalsController ..> VertexMapper
VertexMapper ..> VertexDTO
ShortestPathBetweenTwoLocalsController ..> ShortPaths
ShortPaths -> Graph
ShortPaths -> Algorithms



class MostEfficientCircuitUI  {
  +run(
}

class MostEfficientCircuitController{
+efficientCircuit(graph, vertice, path)
}

class EfficientCircuit{
+efficientCircuit(graph, vertice, paht)
+backTrackCircuit(graph, location, locationOrigem, locationUsed)
}


MostEfficientCircuitUI ..> MostEfficientCircuitController
MostEfficientCircuitController ..> EfficientCircuit
ShortestPathBetweenTwoLocalsController --> FreightNetwork


class IdleUI  {
  +run(
}

class IdleController{
-DataBaseConnection connection
+callIdleFunction(connection)
}

class IdleFunction{
+checkIdleShips(connection)

}


IdleUI ..> IdleController
IdleController ..> IdleFunction



class AvgOccupancyRatePerManifestUI  {
  +run(
}

class AvgOccupancyRatePerManifestController{
-DatabaseConnection connection
+getAvgOccupancyRatePerManifest()
+getAllShipsWithTrip()
+verifyShip()
}

class CallAvgOccupancyRatePerManifest{
+checkIdleShips(connection)

}

AvgOccupancyRatePerManifestUI ..> AvgOccupancyRatePerManifestController
AvgOccupancyRatePerManifestController ..> CallAvgOccupancyRatePerManifest
AvgOccupancyRatePerManifestController ..> DataBaseUtils


class AvgOccupancyRatePerVoyageWithThresholdUI {
  +run(
}

class AvgOccupancyRatePerVoyageWithThresholdController{
-DatabaseConnection connection
+getAvgOccupancyRateThreshold()
+getAllShipsWithTrip()
+verifyShip()
}

class CallAvgOccupancyRateThreshold{
+occupationRateFunction()
}

AvgOccupancyRatePerVoyageWithThresholdUI ..> AvgOccupancyRatePerVoyageWithThresholdController
AvgOccupancyRatePerVoyageWithThresholdController ..> CallAvgOccupancyRateThreshold
AvgOccupancyRatePerVoyageWithThresholdController ..> DataBaseUtils


class ExportInformationUI {
  +run(
}

class ExportInformationController{
-DatabaseConnection databaseConnection
+export()
}

class ContainerInformationExporter{
+exportInformation()
}
class ISODimentions{
-int width
-int length
-int height
+getWidth()
+getLength()
+getHeight()
}

class ContainerPosition{
-int xPos
-int yPos
-int zPos
+getxPos()
+getyPos()
+getzPos()
}

class RefrigeratedContainer{
-double temperature
-double energyConsume
+getTemperature()
+getEnergyConsume()
}

ExportInformationUI ..> ExportInformationController
ExportInformationController ..> ContainerInformationExporter
ExportInformationController ..> DataBaseUtils
ExportInformationController --> Container
Container -> ISODimentions
Container -> ContainerPosition
Container --|> RefrigeratedContainer


class TotalEnergyInACertainTripUI {
  +run(
}

class TotalEnergyInACertainTripController{
-DatabaseConnection databaseConnection
+calculationToMinus5Degrees()
+calculationTo7Degrees()
+getAllTripList()
+verifyTrip()
}

class PhysicsCalculation{
+calculateEnergyConsumptionDeterminedTripMinus5C()
+calculateEnergyConsumptionDeterminedTrip7C()
}

TotalEnergyInACertainTripUI ..> TotalEnergyInACertainTripController
TotalEnergyInACertainTripController ..> PhysicsCalculation
TotalEnergyInACertainTripController ..> DataBaseUtils


class TotalEnergySuppliedUI {
  +run(
}

class TotalEnergySuppliedController{
+calculationToMinus5()
+calculationTo7()
}

class PhysicsCalculation{
+calculateTotalEnergySuppliedMinus5()
+calculateTotalEnergySupplied7()
+calculateEnergyConsumptionMinus5()
+calculateEnergyConsumption7()
}

TotalEnergySuppliedUI ..> TotalEnergySuppliedController
TotalEnergySuppliedController ..> PhysicsCalculation


class AuxiliaryPowerNeddedUI {
  +run(
}

class AuxiliaryPowerNeddedController{
+calculateSupplyNeededForMinus5(int numberOfContainers, double temperature, int journeyTime)
+calculateSupplyNeededFor7(int numberOfContainers, double temperature, int journeyTime)
}

class PhysicsCalculation{
+calculateTotalEnergySuppliedMinus5()
+calculateTotalEnergySupplied7()
+calculateEnergyConsumptionMinus5()
+calculateEnergyConsumption7()
+calculateTotalEnergySupplied7()
+calculateEnergyConsumptionMinus5()
+calculateSuppliesNeededForMinus5(int numberOfContainers, double temperature, int voyageTime)
+calculateSuppliesNeededFor7(int numberOfContainers, double temperature, int voyageTime)
}

AuxiliaryPowerNeddedUI ..> AuxiliaryPowerNeddedController
AuxiliaryPowerNeddedController ..> PhysicsCalculation


class CalculateCenterUI {
  +run(
}

class CalculateCenterController{
+calculateCenterOfMass(vesselType)
}

class CalculateCenter{
+calculateCenter(vesselType)
}

CalculateCenterUI ..> CalculateCenterController
CalculateCenterController ..> CalculateCenter

class CargoCenterOfMassUI {
  +run(
}

class CargoCenterOfMassController{
+calculateCenter(list)
}

class PhysicsCalculation{
+calculateCenterMassOneDim(positionList)
}

CargoCenterOfMassUI ..> CargoCenterOfMassController
CargoCenterOfMassController ..> PhysicsCalculation




'SPRINT 3

class FreightNetworkUI{
+run()
}
class FreightNetworkController{
+createGraph(int n)
}

class FreightNetwork{
-graph
+FreightNetwork()
+createGraph(int n, DatabaseConnection connection)
+getGraph()
+addEdgeAndCalculateWeight(Vertex v1, Vertex v2)
+addEdgeWithWeight(Vertex v1, Vertex v2, double weight)
+size()
+toString()
+connectionsSize()
-ports(int n, DatabaseConnection connection)
-linkPortToNClosestPorts(int n)
-dfsPortsLink(Vertex vOriginal, int vKey, boolean[] visited, ArrayList<Facility> objects)
-linkPortToCapital()
-capitals(DatabaseConnection connection)
}

class DatabaseUtils{
+getBorders(DatabaseConnection databaseConnection)
+getMmsiByCargoManifest(DatabaseConnection databaseConnection, String cargoManifestId)
}

interface Graph{
+toString();
+isDirected();
+numVertices();
+vertices();
+validVertex(V vert);
+key(V vert);
+vertex(int key);
+vertex(Predicate<V> p);
+adjVertices(V vert);
+numEdges();
+edges();
+edge(V vOrig, V vDest);
+edge(int vOrigKey, int vDestKey);
+outDegree(V vert);
+inDegree(V vert);
+incomingEdges(V vert);
+addVertex(V vert) throws NullVerticesException;
+addEdge(V vOrig, V vDest, E weight) throws NullVerticesException;
+removeVertex(V vert) throws NullVerticesException;
+removeEdge(V vOrig, V vDest) throws NullVerticesException;
+clone();
}
FreightNetworkUI ..> FreightNetworkController
FreightNetworkController ..>FreightNetwork
FreightNetwork -> Graph
FreightNetwork ..> DatabaseUtils
FreightNetworkController ..> Company

class ColorGraphUI{
}
class ColorGraphController{
+colorGraph()
}
class ColourGraph{
+setColours()
}
interface Vertex {
+getDesignation()
+isColour()
+getColour()
+setColour()
}
ColorGraphUI ..> ColorGraphController
ColorGraphController ..> ColourGraph
ColourGraph --> Vertex
ColorGraphController ..> Company

class GraphNClosestPlacesUI{
}

class GraphNClosestPlacesController{
+closestPlaces(n)
}

class GraphNClosestPlaces{
+callFunction(n)
}
GraphNClosestPlacesUI ..> GraphNClosestPlacesController
GraphNClosestPlacesController ..> Company
GraphNClosestPlacesController ..> GraphNClosestPlaces
GraphNClosestPlacesController ..> FreightNetwork


class GetAuditTrailUI{
+run()
}
class GetAuditTrailController{
+GetAuditTrailController()
+getAuditTrail()
}
class GetAuditTrailScript{
getAuditTrail(DatabaseConnection databaseConnection)
}

GetAuditTrailUI ..> GetAuditTrailController
GetAuditTrailController .> GetAuditTrailScript
GetAuditTrailController .> Company


class GetContainerRouteUI{
}

class GetContainerRouteController{
+getContainerRoute()
}

class GetContainerRouteScript{
+getContainerRoute()
}

GetContainerRouteUI .> GetContainerRouteController
GetContainerRouteController ..> GetContainerRouteScript
GetContainerRouteController .> Company

class FacilityOccupationRateUI{
}

class FacilityOccupationRateController{
-DatabaseConnection connection
+getOccupation()
+getNumberContainersLeaving()
}

class CallOccupationRateFunction{
+occupationRateFunction()
}

class CallNumberOfContainersLeavingFunction{
+numberOfContainers()
}

FacilityOccupationRateUI ..> FacilityOccupationRateController
FacilityOccupationRateController .> CallNumberOfContainersLeavingFunction
FacilityOccupationRateController .> CallOccupationRateFunction
FacilityOccupationRateController ..> Company

class CreateCargoManifestContainerUI{
}
class CreateACargoManifestForWarehouseFullController{
-DatabaseConnection databaseConnection
+createCMC()
}
class DataBaseUtils{
+createCargoManifestContainer()
+verifyCargoManifest()
+verifyContainer()
}

CreateCargoManifestContainerUI .> CreateACargoManifestForWarehouseFullController
CreateACargoManifestForWarehouseFullController ..> DatabaseUtils
CreateACargoManifestForWarehouseFullController .> Company

class CallTheAvailableResourcesFunctionUI{
}

class CallTheAvailableResourcesFunctionController{
}

class CallTheAvailableResourcesFunction{
+callFunction(month, year, id, connection)
}

class ShipStore{
-List Shipstore
}


CallTheAvailableResourcesFunctionUI ..> CallTheAvailableResourcesFunctionController
CallTheAvailableResourcesFunctionController ..> CallTheAvailableResourcesFunction
CallTheAvailableResourcesFunction ..> ShipStore
ShipStore -> Ship

class Create3DMatrixUI{
}

class Create3DMatrixController{
-databaseConnection
+createMatrix(mmsi)
}

class MatrixFileGenerator{
-databaseConnection
+generateMatrixFile()
}

class DataBaseUtils{
+getMmsiByCargoManifest()
+getCargoManifestByID()
+countContainerByCargoManifest()
+getContainerByCargo()
}
Create3DMatrixUI ..> Create3DMatrixController
Create3DMatrixController ..> MatrixFileGenerator
MatrixFileGenerator --> DataBaseUtils
MatrixFileGenerator --> Ship


class GetMaterialScriptUI{
}

class GetMaterialScriptController{
-databaseConnection
+materialTemperatureController(temperature)
}

class GetMaterialScript{
+materialScript(temperature)
}
class DataBaseUtils{
+getContainerID()
}

GetMaterialScriptUI ..> GetMaterialScriptController
GetMaterialScriptController ..> GetMaterialScript
GetMaterialScriptController ..> Company
GetMaterialScript .>DataBaseUtils

class ThermalResistanceUI{
}

class ThermalResistanceController{
-DatabaseConnection databaseConnection
-GetMaterialsScript getMaterialsScript
+getMaterialThermalResistance()
}

class GetMaterialsScript{
-DatabaseConnection databaseConnection
-String TEMP
+getThermalResistance()
+getKConstant()
}

ThermalResistanceUI ..> ThermalResistanceController
ThermalResistanceController .> Company
ThermalResistanceController ..> GetMaterialsScript

'Sprint 1/2

class FindAvailableShipsUI{
}
class FindAvailableShipsController{
}
FindAvailableShipsUI ..> FindAvailableShipsController
FindAvailableShipsController ..> Company

class OccupancyRateUI{
}
OccupancyRateUI ..> OccupancyRateController
class OccupancyRateController{
}
OccupancyRateController -> ShipStore
OccupancyRateController ..> Company
class CargoManifest{
-String identification
-AVL offloaded
-AVL loaded
+getIdentification()
}
class Container{
-String identification
-int payload
-int tare
-int gross
-String isoCode
-ContainerPosition position
-boolean isRefrigerated
-boolean toOffload
}
Ship --> CargoManifest
CargoManifest --> Container

class AverageCargoByYearUI{
}

class AverageCargoByYearController{
}
AverageCargoByYearUI --> AverageCargoByYearController
AverageCargoByYearController --> Company



class OffLoadedUI{
}

class OffLoadedController{
}
OffLoadedUI ..> OffLoadedController
OffLoadedController ..> Company

class ContainerStore{
-ContainerAVL
+getContainer()
}
Company --> ContainerStore
ContainerStore --> Container

class CargoManifestStore{
-CargoManifestAVL
}
Company --> CargoManifestStore
CargoManifestStore --> CargoManifest

class SearchContainerLocationByClientUI{
}

class SearchContainerLocationByClientUI{
}
SearchContainerLocationByClientUI ..> SearchContainerLocationByClientController
SearchContainerLocationByClientController ..> Company

class ImportPortsUI{
}

class ImportPortsController{
}

class PortImporter{
}
ImportPortsUI ..> ImportPortsController
ImportPortsController ..> PortImporter

PortImporter ..> Company
class ImportShipsUI{
}

class ImportShipsController{
+importShips(path)
}

class ClosestPortUI{
}
class ClosestPortController{
}

class ShipImporter{
}
ClosestPortUI ..> ClosestPortController
ClosestPortController ..> Company

class CsvUtils{
+readFile(path)
}

class ShipStore{
+getShip(mmsi)
+exists(mmsi);
+getlShip()
+sortedList()
+getTopN()
+getShipByMMSI()
+getShipByIMO()
+getShipByCallSign()
+transformAVLIntoListPairsOfShip()
+getShipSummaryByMMSI()
+getShipSummaryByIMO()
+getShipSummaryByCallSign()
-getShipSummaryStructure()
+getFirstDate()
+getLastDate()
+differenceBetweenDates()
+gextMaxSog()
+getMeanSog()
+getMaxCog()
+getMeanCog()
+getDepartureLatitude()
+getDepartureLongitude()
+getArrivalLatitude()
+getArrivalLongitude()
}

class Ship{
-transceiverClass
-posDate
-cargo
-mmsi
-name
-imo
-numGen
-genPowerOutput
-callSign
-vesselType
-length
-width
-capacity
-draft
+addPosition(position)
+getPosition(date)
+writeAllPos()
+organizeDatePos()
+checkMMSI()
+checkIMO()
+addNewPosMessage(position)
+getMmsi()
+getName()
+getNumGen()
+getCallSign()
+getVesselType()
+getLength()
+getWidth()
+getCapacity()
+getGenPowerOutput()
+getTravelledDistance()
+getTotalNumberOfMovements(ship)
+getDeltaDistance()
+getVesselType()
}

class Position{
-latitude
-longitude
-heading
-sog
-cog
-date
+getLatitude()
+getLongitude()
+getHeading()
+getSog()
+getCog()
}

class PositionTree{
+add(position)
-positionTree
+getSmallestPosition()
+getBiggestPosition()
+getSize()
+getOrderList()
+getPosition()
+getInOrderList()
}

class SearchShipUI{

}

class SearchShipController{
  +searchShipByMMSI(mmsi)
  +searchShipByIMO(imo)
  +searchShipByCallSign(callsign)
}



class TopPairsUI{
+run()
}

class Company{
-ShipStore
+getShipStore()
}

class TopPairsController{
+getPairs()
}

class ShipStore{
+getPairsOfShipsString()
-getPairsOfShipsInsideBST()
}

class PositionalMessagesUI{
}

class PositionalMessagesController{
+writePositionMessages()
}

class ListShipsUI{
}

class ListShipsController{
+getShipList()
+sortedList()
+getShipListDTO()
}
class ShipMapper{
+toDTO(ship)
}
class ShipDto{
+toDTO()
}

class TopNShipsUI{
}

class TopNShipsController{
+getTopNShips()
}


class GenerateShipSummaryUI{
}
class GenerateShipSummaryController{
+getShipSummaryByMMSI()
+getShipSummaryByIMO()
+getShipSummaryByCallSign()
}



ImportShipsUI ..> ImportShipsController
ImportShipsController ..> ShipImporter
ShipImporter ..> CsvUtils
ShipImporter ..> Company
ShipStore --> Ship
Ship -> PositionTree
Ship --> Position
PositionTree --> Position
SearchShipUI ..> SearchShipController
SearchShipController ..> Company
TopPairsUI ..> TopPairsController
TopPairsController ..> Company
Company --> ShipStore

PositionalMessagesUI ..> PositionalMessagesController
PositionalMessagesController ..> Company

ListShipsUI ..> ShipDto
ListShipsUI ..> ListShipsController
ListShipsController ..>ShipMapper
ShipMapper ..> ShipDto
ListShipsController ..> Company

TopNShipsUI ..> TopNShipsController
TopNShipsController ..> Company

GenerateShipSummaryUI ..> GenerateShipSummaryController
GenerateShipSummaryController ..> Company
GenerateShipSummaryController ..> ShipStore
Company --> Ship

@enduml